1. Django CRUD (Create, Retrieve, Update, Delete) Function Based Views:

- Create : create or add new entries in a table in the database. 
- Retrieve : read, retrieve, search, or view existing entries as a list(List View) or retrieve a particular entry in detail (Detail View) 
- Update : update or edit existing entries in a table in the database 
- Delete : delete, deactivate, or remove existing entries in a table in the database

# models.py

from django.db import models

class BookModel(models.Model):
	title = models.CharField(max_length = 200)
    author = models.CharField(max_length = 200)
	description = models.TextField()

	# renames the instances of the model with their title name
	def __str__(self):
		return self.title

-> Run two Commands:
- python manage.py makemigrations
- python manage.py migrate

# forms.py

from django import forms
from .models import BookModel

class BookForm(forms.ModelForm):
    # create a Meta Class
    class Meta:
        # specify the model to use
        model = BookModel
        # specify fields to be used
        fields = ['title', 'author', 'description']


1. Create View:
-> Create View refers to a view (logic) to create an instance of a table in the database.
-> It is just like taking an input from a user and storing it in a specified table. 

# views.py

from django.shortcuts import render
from .models import BookModel
from .forms import BookForm

def create_view(request):
	# dictionary for initial data with field names as keys
	context ={}

	# add the dictionary during initialization
	form = BookForm(request.POST or None)
	if form.is_valid():
		form.save()
		
	context['form']= form
	return render(request, "create_view.html", context)

# create_view.html

<form method="POST" enctype="multipart/form-data">

	<!-- Security token -->
	{% csrf_token %}

	<!-- Using the formset -->
	{{ form.as_p }}
	
	<input type="submit" value="Submit">
</form>

2. Retrieve View:
-> List View refers to a view (logic) to list all or particular instances of a table from the database in a particular order.
-> It is used to display multiple types of data on a single page or view, for example, products on an eCommerce page.

# views.py

from django.shortcuts import render
from .models import BookModel

def list_view(request):
	# dictionary for initial data with field names as keys
	context ={}

	# add the dictionary during initialization
	context["dataset"] = BookModel.objects.all()
	return render(request, "list_view.html", context)

# list_view.html

<div class="main">

	{% for data in dataset %}.

	{{ data.title }}<br/>
	{{ data.author }}<br/>
	{{ data.description }}<br/>
	<hr/>

	{% endfor %}

</div>

3. Detail View:
-> Detail View refers to a view (logic) to display a particular instance of a table from the database with all the necessary details.
-> It is used to display multiple types of data on a single page or view, for example, profile of a user. 

# urls.py

from django.urls import path
from .views import detail_view

urlpatterns = [
	path('<id>', detail_view),
]

# views.py

from django.shortcuts import render
from .models import BookModel

# pass id attribute from urls
def detail_view(request, id):
	# dictionary for initial data with field names as keys
	context ={}

	# add the dictionary during initialization
	context["data"] = BookModel.objects.get(id = id)
	return render(request, "detail_view.html", context)

# detail_view.html

<div class="main">
	
	<!-- Specify fields to be displayed -->
	{{ data.title }}<br/>
	{{ data.author }}<br/>
	{{ data.description }}<br/>

</div>

4. Update View:
-> Update View refers to a view (logic) to update a particular instance of a table from the database with some extra details.
->  It is used to update entries in the database.

# views.py

from django.shortcuts import (get_object_or_404,render,HttpResponseRedirect)
from .models import BookModel
from .forms import BookForm

# after updating it will redirect to detail_View
def detail_view(request, id):
    context ={}
    context["data"] = BookModel.objects.get(id = id)
    return render(request, "detail_view.html", context)

# update view for details
def update_view(request, id):
    context ={}
    # fetch the object related to passed id
    obj = get_object_or_404(BookModel, id = id)

    # pass the object as instance in form
    form = BookForm(request.POST or None, instance = obj)

    # save the data from the form and redirect to detail_view
    if form.is_valid():
        form.save()
        return HttpResponseRedirect("/"+id)

    # add form dictionary to context
    context["form"] = form
    return render(request, "update_view.html", context)

# update_view.html

<div class="main">
	<!-- Create a Form -->
	<form method="POST">
		<!-- Security token by Django -->
		{% csrf_token %}

		<!-- form as paragraph -->
		{{ form.as_p }}

		<input type="submit" value="Update">
	</form>

</div>

# detail_view.html

<div class="main">
	<!-- Display attributes of instance -->
	{{ data.title }} <br/>
	{{ data.author }} <br/>
	{{ data.description }}
</div>


5. Delete View:
-> Delete View refers to a view (logic) to delete a particular instance of a table from the database.
-> It is used to delete entries in the database.

# views.py

from django.shortcuts import (get_object_or_404,render,HttpResponseRedirect)
from .models import BookModel

# delete view for details
def delete_view(request, id):
    context ={}
    # fetch the object related to passed id
    obj = get_object_or_404(BookModel, id = id)

    if request.method =="POST":
        # delete object
        obj.delete()
        # after deleting redirect to
        # home page
        return HttpResponseRedirect("/")

    return render(request, "delete_view.html", context)

# urls.py 

from django.urls import path
from .views import delete_view

urlpatterns = [
	path('<id>/delete', delete_view ),
]

# delete_view.html

<div class="main">
	<!-- Create a Form -->
	<form method="POST">
		<!-- Security token by Django -->
		{% csrf_token %}
		Are you want to delete this item ?
		<input type="submit" value="Yes" />
		<a href="/">Cancel </a>
	</form>
</div>